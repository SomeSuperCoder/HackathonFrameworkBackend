package bot

import (
	"errors"
	"fmt"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

func (b *Bot) StartCommand(ctx *th.Context, update telego.Update) error {
	// Check if user has an account
	user, err := b.UserRepo.GetUserByUsername(ctx, update.Message.From.Username)
	if errors.Is(err, mongo.ErrNoDocuments) {
		// Handle the case where the user does not have an account
		inlineKeyboard := tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("–ó–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω").WithCallbackData("register"),
			),
		)
		message := tu.Messagef(
			tu.ID(update.Message.Chat.ID),
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %v! –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω üò≠ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
			update.Message.Chat.FirstName,
		).WithReplyMarkup(inlineKeyboard)
		b.Bot.SendMessage(ctx, message)
		return nil
	} else if err != nil {
		b.Bot.SendMessage(ctx, tu.Message(
			tu.ID(update.Message.Chat.ID),
			"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
		))
		return err
	}
	botUser, _ := b.Bot.GetMe(ctx)
	inlineKeyboard := tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ").WithURL(fmt.Sprintf("t.me/%v/controlcenter", botUser.Username)),
		),
	)

	b.Bot.SendMessage(ctx, tu.Messagef(
		tu.ID(update.Message.Chat.ID),
		"%v, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!", user.Name,
	).WithReplyMarkup(inlineKeyboard))

	return nil
}
